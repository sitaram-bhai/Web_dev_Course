<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Day four to learing</title>
</head>

<body>
    <dl>
        <dt><b> how data moves through the internet</b></dt>
        <dd>Data moves through the internet using a protocol called the Internet Protocol (IP). This protocol is
            responsible for breaking data into smaller packets, routing them through different networks, and
            reassembling them at their final destination.

            Here are the general steps that data takes to move through the internet:

            Data is created by a device, such as a computer or smartphone.
            The data is broken into smaller packets, each with its own header containing information about its source
            and destination.
            The packets are sent to the device's local network, which forwards them to the internet service provider
            (ISP).
            The ISP routes the packets through a series of networks, each with its own set of routers and switches,
            until they reach their final destination.
            Once the packets arrive at their destination, they are reassembled into the original data.
            Each device on the internet has a unique IP address that allows other devices to send data to it. Routers
            and switches play a crucial role in directing data packets to their correct destination by examining the
            headers of each packet and using routing tables to determine the best path to take.

            Overall, the internet is a complex and interconnected network of devices, networks, and protocols that work
            together to enable the transfer of data across vast distances.</dd>

        <dt><b> The technologies that underpin the internet</b></dt>
        <dd>The internet is a vast network of interconnected devices and systems that relies on many different
            technologies to function. Here are some of the key technologies that underpin the internet:

            Transmission Control Protocol/Internet Protocol (TCP/IP): TCP/IP is the foundation of the internet and is
            responsible for breaking data into packets, routing them through different networks, and reassembling them
            at their final destination.

            Domain Name System (DNS): DNS is the system that translates domain names (such as www.example.com) into IP
            addresses that computers can use to connect to web servers.

            Hypertext Transfer Protocol (HTTP): HTTP is the protocol that enables the transfer of web pages and other
            resources across the internet. It allows web browsers to request resources from web servers and receive them
            in a structured format.

            World Wide Web (WWW): The WWW is a system of linked hypertext documents that can be accessed over the
            internet. It is based on HTTP and HTML, which provide a standardized way of creating and displaying web
            pages.

            Transmission technologies: The internet relies on a variety of transmission technologies to send data
            between devices, including wired technologies like fiber optic cables and copper wires, and wireless
            technologies like Wi-Fi and cellular networks.

            Encryption technologies: Encryption technologies like SSL/TLS and HTTPS are used to protect data as it
            travels across the internet, ensuring that it cannot be intercepted or read by unauthorized parties.

            Cloud computing: Cloud computing technologies allow companies and individuals to store and access data and
            applications over the internet, without needing to manage their own physical servers.

            Overall, the internet is a complex system that relies on many different technologies working together to
            provide the connectivity, functionality, and security that we rely on every day.
        </dd>
        <br>
        <dt>Framework</dt>
        <dd>A framework is a collection of libraries, tools, and conventions that provide a structured way to build
            software applications. Frameworks often provide a set of building blocks for developers to use, such as
            pre-built components, templates, and code libraries. Frameworks can help developers to work more efficiently
            and can also improve the quality and maintainability of the resulting code.</dd>
        <br>
        <dt>Browser API</dt>
        <dd>Browser APIs are sets of programming interfaces (APIs) that allow developers to interact with a web browser
            and perform various tasks such as manipulating the Document Object Model (DOM),

        </dd> <br>
        <dd>
            Browser APIs are a set of interfaces and tools that allow developers to interact with the browser and
            perform various tasks such as manipulating the DOM, making HTTP requests, and accessing device hardware.

            Some common examples of browser APIs include the Document Object Model (DOM), XMLHttpRequest (XHR), Web
            Storage, and Geolocation API.

            The DOM API is used to manipulate the HTML and CSS content of a web page. It allows developers to add,
            remove, or modify elements on the page, as well as attach event listeners to those elements.

            The XHR API enables developers to make HTTP requests to a server and retrieve data without reloading the
            entire page. This is commonly used for dynamic content and AJAX interactions.

            The Web Storage API allows developers to store data locally on the user's device, either as session storage
            or local storage.
        </dd>

        <dt>Rest API</dt>
        <dd>REST (Representational State Transfer) is an architectural style for creating web services that use HTTP
            methods to interact with resources represented by URLs. A RESTful API allows for communication between
            different software systems by adhering to these principles. RESTful APIs are widely used in web development
            because they are simple, scalable, and flexible.</dd>
        <dt>Sensor-based API</dt>
        <dd>A sensor-based API is an interface that allows developers to access data from sensors and other IoT devices.
            It provides a standardized way for developers to interact with sensor data, enabling them to build
            applications that make use of this data. Sensor-based APIs typically use protocols such as HTTP or MQTT to
            transmit data from the sensor to the application, and may use formats such as JSON or XML to represent the
            data. Some common use cases for sensor-based APIs include monitoring environmental conditions, tracking the
            location of assets or vehicles, and measuring physical activity or health data. Overall, sensor-based APIs
            enable developers to create innovative applications that leverage data from a wide variety of sensors and
            IoT devices.</dd>
    </dl>
</body>



</html>